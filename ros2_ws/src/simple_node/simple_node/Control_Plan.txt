Torque limit will be set as 0.24 Nm for now. 0.16 Nm is needed to stretch the spring, and an arbitrary value was added to counter the efficiency of the gear reduction.

One interesting limitation that we will have to deal with is that the worm gears will make landing difficult.

THE PROCESS:

Proning:
Assuming the leg begins in the standard position (both angles at 45 deg), the jump will have an initial Proning stage where the bottom leg is connected by the servo connector to the top leg. Both angles will need to be equal - thus they will both have an angle of 0. Position control in both motors will be used to move the legs, and the servo will extend to connect the two legs.

Poising:
Once prone, the Poising stage will begin, where the legs remain still but the bottom motor switches to torque control to fully extend the spring. This stage should be done as fast as possible, as the motor gets REALLY hot when running at max torque. 

Pouncing:
Immediately after the full torque is reached, the Pouncing stage begins. The servo will release, allowing the spring to move the bottom leg. The bottom motor will continue to provide maximum torque, giving the spring a “wall” to extend off of. The exact profile of torque against time will depend on the spring constant. For our first jump, we will keep it at max torque. 

Bracing:
Midair, the torque profile will have moved the controlled end of the spring some angle. The other end will have returned to 90 degrees behind the controlled end. The Bracing stage will use position control for both motors to return the leg segments to a normal position to prepare for a landing, ie. allow the spring and the motors to absorb the robot’s kinetic energy. For this first attempt, the leg angles will both be 70 degrees.

Landing:
Finally, the Landing stage will be when the leg actually lands and returns to the standard position. During this phase, the motors will transition from the bracing angles to the standard angles during the landing. The exact trajectory is to be determined by testing. For now, we will just use position control in both motors. As the angle is detected to vary the control will be initiated.


From these tests we will gather data from both of the motors and from the 6-axis sensor. Additionally a scale will be placed on the foot to measure force. This data will be used to iterate our motor controls and improve the jump height. Specifically, we want to estimate the spring constant, the inertias of the legs, and 
__________________________
Preliminary code:


## assuming motor is already properly calibrated
## assuming leg is in standard position (both angles at 45 deg)
## motor1 is top motor
## motor2 is bottom motor


### Determine angle offset. We need to define a 0 angle, but the ODrive will have it's own definition of the 0 angle. We need to determine the offset so that we can use our definition in the code. 
proning_angle1 = 0  # [rad]
proning_angle2 = 0  # [rad] 

# Torque setpoint for the bottom motor when poising
poising_torque = 0.24 # [Nm] 

# Create control message objects for each motor
control_message_motor1 = ControlMessage()
control_message_motor2 = ControlMessage()

### PRONING:



control_message_motor1.control_mode = CONTROL_MODE_POSITION_CONTROL
control_message_motor2.control_mode = CONTROL_MODE_POSITION_CONTROL

control_message_motor1.input_pos = proning_angle1
control_message_motor2.input_pos = proning_angle2

##Publish control messages here##

	### Wait 5 seconds ###

### POISING:

##insert code here to swing the servo out##

control_message_motor2.control_mode=ControlMode.CONTROL_MODE_TORQUE_CONTROL
control_message_motor2.input_torque = poising_torque

##Publish control messages here##

	### Wait 1.5 seconds ###

### POUNCING:

##insert code here to swing the servo in##

control_message_motor1.input_pos = 70 * (3.1415/180) - proning_angle1

##Publish control messages here##

	### Wait 0.5 seconds ###

### BRACING:

control_message_motor2.control_mode=ControlMode.CONTROL_MODE_TORQUE_CONTROL

control_message_motor2.input_pos = 70 *(3.1415/180) - proning_angle2
control_message_motor1.input_pos = 70 *(3.1415/180) - proning_angle1

##Publish control message here##

	### Wait 0.25 seconds ###

### LANDING:

# ideally this would start right as the foot touches the ground. However for now we will just wait for a few seconds because first jump wont include the 6axis sensor

control_message_motor2.input_pos = 45 *(3.1415/180) - proning_angle2
control_message_motor1.input_pos = 45 *(3.1415/180) - proning_angle1

##Publish control messages here##
